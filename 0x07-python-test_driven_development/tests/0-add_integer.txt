===========================
The ``0-add_integer`` module
===========================

Using ``add_integer``
--------------------------
This module defines an integer addition function ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` returns the addition of the two arguments. For numbers,
that value is equivalent to using the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
Checking for regular additon
    >>> add_integer(2, 3)
    5

::
Checking positive with negative
    >>> add_integer(2, -3)
    -1

::
Checking function for floating-point values.
    >>> add_integer(2.0, 3.0)
    5

::
Check for float casted before addition
    >>> add_integer(2.9, 0.2)
    2

::
Check for negative float
    >>> add_integer(-2.9, -0.2)
    -2

Floating and non-floating point values can be combined.

::

    >>> add_integer(2.3, -3)
    -1

::
Check for one argument 
    >>> add_integer(2)
    100



Using ``add_integer and Checking for Non-Numbers using TypeError
----------------------------------------------------------------

For ``add_integer()`` it is expected that both arguments in the program are either integers or floats.
If one of the arguments is a non-integer and non-float, a TypeError is raised:

::
Checking number with character:
    >>> add_integer("hello", 3)
    Traceback (most recent call last):    
    ...
    TypeError: a must be an integer

::
Checking characters with number:
    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

::
Checking if both argument is none:
    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::
Checking if second argument is none:
    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

::
Checking number with long int numbers
    >>> add_integer("56333666", 44)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

If arguments a, b provided are non-integers and non-floats, a TypeError message is only printed for the first argument.

::
Checking for first argument:
    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

::
Checking for infinity if provided:
    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::
Checking for passed inf number:
    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer

::

Checking for NaN:
    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

Checking for passed NaN:
    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
