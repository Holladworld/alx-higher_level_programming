From the ``1-my_list`` module
============================

Using ``1-mylist``
---------------------

Importing function from module:
	>>> MyList = __import__('1-my_list').MyList

Checking for module docstring:
	>>> cist = __import__("1-my_list").__doc__
	>>> len(cist) > 1
	True

Checking for the correct Class Type test:
	>>> cist = MyList()
	>>> type(cist) == MyList
	True

Checking correct Instance test:
	>>> cist = MyList()
	>>> isinstance(cist, list)
	True

Checking print_sorted method is an instance method:
	>>> type(MyList.__dict__['print_sorted'])
	<class 'function'>

Checking print_sorted method via class:
	>>> cist.__class__.print_sorted()
	Traceback (most recent call last):
	TypeError: print_sorted() missing 1 required positional argument: 'self'

Checking print_sorted method with 1 arg:
	>>> cist.print_sorted([67, 0, 121])
	Traceback (most recent call last):
	TypeError: print_sorted() takes 1 positional argument but 2 were given

Checking for negative number:
	>>> cist = MyList()
	>>> cist.append(-10)
	>>> cist.append(-1)
	>>> cist.append(-200)
	>>> cist.append(-7)
	>>> cist.append(-8)
	>>> print (cist)
	[-10, -1, -200, -7, -8]
	>>> cist.print_sorted()
	[-200, -10, -8, -7, -1]
	>>> print(cist)
	[-10, -1, -200, -7, -8]

Checking for empty list test:
	>>> cist = MyList()
	>>> cist.print_sorted()
	[]

Checking normal list test:
	>>> cist = MyList([3, 22, 1])
	>>> cist.print_sorted()
	[1, 3, 22]

Checking normal list2:
	>>> cist = MyList([1, 4, 2, 3, 5])
	>>> cist.print_sorted()
	[1, 2, 3, 4, 5]

Negative numbers list test:
	>>> cist = MyList([-3001, -99, -579999, 0, -98167333, -222])
	>>> cist.print_sorted()
	[-98167333, -579999, -3001, -222, -99, 0]

Original list comparition:
	>>> cist = MyList([4, 21, 1, -14, 28, 180, 0])
	>>> cist.print_sorted()
	[-14, 0, 1, 4, 21, 28, 180]
	>>> cist
	[4, 21, 1, -14, 28, 180, 0]

Checking for list already in correct order:
	>>> cist = MyList([-16, 0, 1, 5, 10, 32, 200])
	>>> cist.print_sorted()
	[-16, 0, 1, 5, 10, 32, 200]

Checking for test append:
	>>> cist = MyList()
	>>> cist.append(100)
	>>> cist
	[100]

